<!DOCTYPE html>
<html>
  <head>
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <title>Yarn Stats</title>
    <style>
      body {
        font-family: -apple-system, system-ui, system-ui, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        background: #2188b6;
      }

      .container h1 {
        line-height: 200px;
        font-size: 60px;
        margin: 0;
        margin-bottom: 40px;
      }

      h1 .sep {
        margin: 0 30px;
      }

      img.logo {
        filter: drop-shadow(4px 4px 0 #1476A2);
        height: 200px;
        vertical-align: middle;
      }

      .container {
        color: #fff;
        text-shadow: 4px 4px #1476A2;
        text-align: center;
        bottom: 0;
        left: 0;
        position: absolute;
        right: 0;
        top: 50%;
        height: 420px;
        margin-top: -210px;
      }

      .stat {
        font-size: 50px;
        line-height: 90px;
        letter-spacing: 1.2px;
      }

      strong {
        font-weight: 700;
      }

      canvas {
        display: block;
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
      }

      #tooltip {
        margin-top: 10px;
        margin-left: 10px;
        display: none;
        position: absolute;
        background-color: rgba(0, 0, 0, 0.8);
        text-shadow: none;
        color: #fff;
        padding: 5px;
        z-index: 9999;
      }

      #help {
        display: none;
        color: #2188b6;
        font-weight: bold;
        width: 30px;
        line-height: 30px;
        height: 30px;
        text-align: center;
        border-radius: 50%;
        position: absolute;
        right: 10px;
        bottom: 10px;
        background-color: #fff;
        text-shadow: none;
        font-size: 20px;
        cursor: pointer;
        box-shadow: 2px 2px #1476A2;
      }

      #modal-overlay {
        display: none;
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
      }

      #modal h2 {
        letter-spacing: 1px;
      }

      #modal {
        display: none;
        position: absolute;
        top: 50%;
        left: 50%;
        margin-left: -400px;
        margin-top: -200px;
        width: 760px;
        background-color: #fff;
        z-index: 9999;
        padding: 20px;
      }

      h1 {
        margin-top: 0;
      }

      #modal p {
        line-height: 24px;
      }

      @media (max-width: 900px) {
        .container {
          position: relative;
          margin-top: 0;
          margin-left: 0;
          padding: 50px 0;
        }

        img {
          display: block;
          margin: 0 auto;
        }

        .container h1 {
          margin-bottom: 0;
        }

        .stat {
          margin-bottom: 40px;
        }

        .sep {
          display: none;
        }

        #help {
          display: none !important;
        }

        strong {
          display: block;
        }
      }
    </style>
  </head>
  <body>
    <canvas id="background"></canvas>
    <div id="tooltip"></div>
    <div id="help">?</div>

    <div id="modal-overlay"></div>
    <div id="modal">
      <h1>About</h1>

      <h2>How do we get Yarn download stats?</h2>
      <p>Yarn by default downloads packages via <code>registry.yarnpkg.com</code> this is a proxy to npm hosted by <a href="https://cloudflare.com">Cloudflare</a>.</p>

      <h2>How are these stats calculated?</h2>
      <p>We use the <a href="https://api.cloudflare.com/#zone-analytics-dashboard">Cloudflare analytics API</a> to query how many package downloads we've retrieved in the last month and then use the <a href="https://api.npmjs.org/downloads/point/last-month">npm downloads API</a> to determine how many total. We then calculate the percentage based on the difference.</p>

      <h2>What does the graph represent?</h2>
      <p>Total downloads processed by the Yarn registry proxy in the past month.</p>
    </div>

    <div class="container">
      <h1>
        <img class="logo" src="/logo.png" />
        <span class="sep">&#183;</span>
        Last month
      </h1>
      <div class="stat"><strong><%= yarnDownloads.toLocaleString() %></strong> yarn downloads</div>
      <div class="stat"><strong><%= percentage %>%</strong> of npm downloads</div>
    </div>

    <script>
      (function() {
        const yarnDownloads = <%= yarnDownloads %>;
        const npmPercentage = <%= percentage %>;
        const npmPercentageWithoutYarn = 100 - npmPercentage;
        const yarnStats = <%- JSON.stringify(cfStats.timeseries.map(data => {
          return {
            until: data.until,
            downloads: data.requests.content_type['octet-stream'],
          };
        }).filter(data => !!data.downloads)); %>;

        const canvas = document.getElementById('background');
        const ctx = canvas.getContext('2d');

        const SCALE = 2;
        const DOT_SIZE = 10;
        const TOP_INDENT = 30;
        const FILL_COLOR = 'rgba(255, 255, 255, 0.2)';
        const STROKE_COLOR = '#167dab';
        const DOT_STROKE_COLOR = '#FFF';
        const DOT_FILL_COLOR = '#167dab';

        let points = [];

        function draw() {
          const height = window.innerHeight;
          const width = window.innerWidth;
          ctx.canvas.width = width * SCALE;
          ctx.canvas.height = height * SCALE;
          ctx.scale(SCALE, SCALE);

          const highest = Math.max.apply(Math, yarnStats.map(data => data.downloads));
          const heightRatio = height / highest;

          // width of each line
          const span = width / yarnStats.length;

          let prevTop = 0;

          points = [];

          // fill
          ctx.lineWidth = 5;
          ctx.fillStyle = FILL_COLOR;
          for (let i = 0; i < yarnStats.length; i++) {
            const {downloads, until} = yarnStats[i];

            const fromLeft = i * span;
            const toLeft = fromLeft + span;

            const toTop = (height - (downloads * heightRatio)) + TOP_INDENT;
            const fromTop = prevTop || toTop;

            ctx.beginPath();
            ctx.moveTo(fromLeft, fromTop);
            ctx.lineTo(fromLeft, height);
            ctx.lineTo(toLeft, height);
            ctx.lineTo(toLeft, toTop);
            ctx.fill();

            points.push({fromLeft, fromTop, toLeft, toTop, until, downloads});

            prevTop = toTop;
          }

          // add graph strokes
          ctx.lineCap = 'round';
          ctx.strokeStyle = STROKE_COLOR;
          for (let {fromLeft, fromTop, toLeft, toTop} of points) {
            ctx.beginPath();
            ctx.moveTo(fromLeft, fromTop);
            ctx.lineTo(toLeft, toTop);
            ctx.stroke();
          }

          // add graph dots
          ctx.strokeStyle = DOT_STROKE_COLOR;
          ctx.fillStyle = DOT_FILL_COLOR;
          for (let i = 0; i < points.length - 1; i++) {
            const {fromLeft, fromTop, toLeft, toTop} = points[i];
            ctx.beginPath();
            ctx.arc(toLeft, toTop, DOT_SIZE, 0, 2 * Math.PI);
            ctx.fill();
            ctx.stroke();
          }
        }

        draw();

        function pad(num) {
          return num <= 9 ? '0' + num : num + '';
        }

        const tooltip = document.getElementById('tooltip');

        window.addEventListener('mousemove', (e) => {
          if (e.target === modal || e.target === modalOverlay) {
            return;
          }

          for (const point of points) {
            const x1 = point.toLeft - DOT_SIZE;
            const x2 = point.toLeft + DOT_SIZE;

            const y1 = point.toTop - DOT_SIZE;
            const y2 = point.toTop + DOT_SIZE;

            if (e.x >= x1 && e.x <= x2 && e.y >= y1 && e.y <= y2) {
              const date = new Date(point.until);
              let text = `${date.getFullYear()}/${pad(date.getMonth() + 1)}/${pad(date.getDate())} - ${point.downloads.toLocaleString()}`;
              tooltip.textContent = text;
              tooltip.style.top = e.y + 'px';
              tooltip.style.left = e.x + 'px';
              tooltip.style.display = 'block';
              return;
            }
          }

          tooltip.style.display = 'none';
        });

        window.addEventListener('resize', draw);

        const modal = document.getElementById('modal');
        const modalOverlay = document.getElementById('modal-overlay');

        const closeModal = () => {
          modal.style.display = 'none';
          modalOverlay.style.display = 'none';
        };

        document.body.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            closeModal();
          }
        });
        modalOverlay.addEventListener('click', closeModal);

        const help = document.getElementById('help');
        help.style.display = 'block';
        help.addEventListener('click', () => {
          modal.style.display = 'block';
          modalOverlay.style.display = 'block';
        });
      })();
    </script>
  </body>
</html>
